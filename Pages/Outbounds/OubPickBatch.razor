@page "/oub-pickbatch"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Oub

@inject StoreoutService ObjService
@inject ISnackbar Snackbar
@inject IStringLocalizer<OubPickBatch> L

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (Elements == null)
{
    //<p><em>Loading...</em></p>
<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h6" Color="Color.Primary"> @L["pageHeader"]</MudText>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Style="background-color: limegreen; color: white; width: 300px; height: 30px;" OnClick=@SetOrderpicking>
            Test Start ASRS
        </MudButton>
    </MudItem>
</MudGrid>


@*<MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Api_Listofmaterialsneeds_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort By">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Custom.FileFormats.FileExcel" Style="background-color: mediumseagreen; color: white; width: 80px; height: 30px;">
                Excel
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Custom.FileFormats.FilePdf" Style="background-color: orangered; color: white; width: 80px; height: 30px;">
                PDF
            </MudButton>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>MoBarcode</MudTh>
            <MudTh>Job</MudTh>
            <MudTh>JobCode</MudTh>
            <MudTh>Material</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>CusCode</MudTh>
            <MudTh>CusName</MudTh>
            <MudTh>ProductCode</MudTh>
            <MudTh>ProductName</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="MoBarcode">@context.Mo_Barcode</MudTd>
            <MudTd DataLabel="Job">@context.Job</MudTd>
            <MudTd DataLabel="JobCode">@context.Job_Code</MudTd>
            <MudTd DataLabel="Material">@context.Material_Code</MudTd>
            <MudTd DataLabel="Description">@context.Material_Description</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="CusCode">@context.Customer_Code</MudTd>
            <MudTd DataLabel="CusName">@context.Customer_Description</MudTd>
            <MudTd DataLabel="ProductCode">@context.Finished_Product</MudTd>
            <MudTd DataLabel="ProductName">@context.Finished_Product_Description</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>*@




<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
          Items="@Elements"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="_dense"
          SelectedItems="@selectedItems"
          MultiSelection="_multiSelect">
    <ColGroup>
        @if (_multiSelect)
            {
        <col style="width: 60px;" />
            }
        @if (_groupDefinition.Expandable)
            {
        <col style="width: 60px;" />
            }
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>@L["REQUESTDATE"]</MudTh>
        <MudTh>@L["DNSEQ"]</MudTh>
        <MudTh>@L["ITEMCODE"]</MudTh>
        <MudTh>@L["ITEMNAME"]</MudTh>
        <MudTh>@L["QTY"]</MudTh>
        <MudTh>@L["UNIT"]</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        @*<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress())">Set Wave</MudButton></MudTd>*@
        <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName} : {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="REQUESTDATE">@Convert.ToDateTime(context.Delivery_Date).ToShortDateString()</MudTd>
        <MudTd DataLabel="DNSEQ">@context.Su_No</MudTd>
        <MudTd DataLabel="ITEMCODE">@context.Item_Code</MudTd>
        <MudTd DataLabel="ITEMNAME">@context.Item_Name</MudTd>
        <MudTd DataLabel="QTY">@context.Request_Qty</MudTd>
        <MudTd DataLabel="UNIT">@context.Unit</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total : @context.Items.Sum((e) => e.Request_Qty)</MudTh>
    </GroupFooterTemplate>
</MudTable>

}

@code {

    private bool _dense = true;
    private bool _multiSelect = true;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "Order Picking";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Sap_Storeout selectedItem = null;
    private HashSet<Sap_Storeout> selectedItems = new HashSet<Sap_Storeout>();
    private IEnumerable<Sap_Storeout> Elements = new List<Sap_Storeout>();
    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetSapStoreoutSetBatch());
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}
        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private void ShowBtnPress()
    {
        // Person tmpPerson = People.First(f => f.Number == nr);
        //tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private TableGroupDefinition<Sap_Storeout> _groupDefinition = new TableGroupDefinition<Sap_Storeout>()
    {
        GroupName = "Order",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Order_No
    };



    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Sap_Storeout element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void SetOrderpicking()
    {
        string strRunning = ObjService.GetRunnning("sq002", 4);

        var strLON1 = selectedItems.GroupBy(c => new
        {
            c.Delivery_Date,
            c.Delivery_Priority,
            c.Order_No,
            c.Ship_To_Code
        })
        .Select(gcs => new
        {
            delivery_date = gcs.Key.Delivery_Date,
            delivery_priority = gcs.Key.Delivery_Priority,
            order_no = gcs.Key.Order_No,
            ship_to_code = gcs.Key.Ship_To_Code,
        }).ToList();

        Int32 iTotal = strLON1.Count;
        Int32 iCount = 0;
        Boolean bCheck;
        foreach (var recItem in strLON1)
        {
            DateTime delivery_date = (DateTime)recItem.delivery_date;
            Int32 delivery_priority = (Int32)recItem.delivery_priority;
            string order_no = recItem.order_no;
            string ship_to_code = recItem.ship_to_code;

            // Create Batch Order

            bCheck = false;
            bCheck = ObjService.CreateBatchOrder(delivery_date, delivery_priority, order_no, ship_to_code, strRunning);

            if (bCheck == true)
            {
                iCount++;
            }
            else
            {
                break;
            }
        }

        // Create Batch Setting
        if (iCount == iTotal)
        {
            bCheck = false;
            bCheck = ObjService.CreateBatchSetting(strRunning, 0);
        }
        else
        {
            bCheck = false;
            bCheck = ObjService.RollbackBatch(strRunning);
            Snackbar.Add("Create Wave >>  Order Losss", Severity.Error);
        }

        // Start Batch

        if (bCheck == true)
        {
            bCheck = false;
            bCheck = ObjService.StartBatchsetting(strRunning, 0);
        }

        if (bCheck == true)
        {
            Snackbar.Add("Create Wave >> Success", Severity.Success);
        }
        else
        {
            Snackbar.Add("Create Wave >> Start Losss", Severity.Error);
        }
        Elements = ObjService.GetSapStoreoutSetBatch();
    }
}
