@page "/3/3_2"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Oub


@inject StoreoutService ObjService
@inject UserServices OpjUserService
@inject ISnackbar Snackbar
@inject IStringLocalizer<OubPickBatch> L
@attribute [Authorize]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (Elements == null)
{
    //<p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Done"
                   Color="Color.Primary"
                   OnClick=@SetOrderpicking>@L["Start ASRS"]</MudButton>
                <MudSpacer />
            </MudAppBar>

            <MudTable Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Height="500px" FixedHeader="true"
                      Items="@Elements"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                      GroupFooterClass="mb-4"
                      Dense="_dense"
                      SelectedItems="@selectedItems"
                      MultiSelection="_multiSelect">
                <ColGroup>
                    @if (_multiSelect)
                    {
                        <col style="width: 60px;" />
                    }
                    @if (_groupDefinition.Expandable)
                    {
                        <col style="width: 60px;" />
                    }
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                </ColGroup>
                <HeaderContent>
                    <MudTh>@L["REQUESTDATE"]</MudTh>
                    <MudTh>@L["DNSEQ"]</MudTh>
                    <MudTh>@L["ITEMCODE"]</MudTh>
                    <MudTh>@L["ITEMNAME"]</MudTh>
                    <MudTh>@L["QTY"]</MudTh>
                    <MudTh>@L["UNIT"]</MudTh>
                    <MudTh>@L["PALLET"]</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName} : {context.Key}") @L["Total"]: @context.Items.Sum((e) => e.Request_Qty)</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel=>@L["REQUESTDATE"]>@Convert.ToDateTime(context.Delivery_Date).ToString(VarGlobals.FormatD)</MudTd>
                    <MudTd DataLabel=@L["DNSEQ"]>@context.Su_No</MudTd>
                    <MudTd DataLabel=@L["ITEMCODE"]>@context.Item_Code</MudTd>
                    <MudTd DataLabel=@L["ITEMNAME"]>@context.Item_Name</MudTd>
                    <MudTd DataLabel=@L["QTY"]>@string.Format(VarGlobals.FormatN0, context.Request_Qty)</MudTd>
                    <MudTd DataLabel=@L["UNIT"]>@context.Unit</MudTd>
                    <MudTd DataLabel=@L["PALLET"]>@context.Pallet_No</MudTd>
                </RowTemplate>
                <GroupFooterTemplate>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="6">@L["Total"]: @context.Items.Sum((e) => e.Request_Qty)</MudTh>
</GroupFooterTemplate>
            </MudTable>

        }

@code {

    private bool _dense = true;
    private bool _multiSelect = true;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    public string mPagedesc { get; set; } = "3.2.Order Picking";
    private string mPagename { get; set; } = "/3/3_2";

    private readonly string pageheader = "3.2.Order Picking";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Sap_Storeout selectedItem = null;
    private HashSet<Sap_Storeout> selectedItems = new HashSet<Sap_Storeout>();
    private IEnumerable<Sap_Storeout> Elements = new List<Sap_Storeout>();
    public int elevation = 0;
    private ResultReturn resultReturn = null;

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetSapStoreoutSetBatch());
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}
        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private void ShowBtnPress()
    {
        // Person tmpPerson = People.First(f => f.Number == nr);
        //tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private TableGroupDefinition<Sap_Storeout> _groupDefinition = new TableGroupDefinition<Sap_Storeout>()
    {
        GroupName = "Order",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Order_No
    };



    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Sap_Storeout element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void SetOrderpicking()
    {
        string strRunning = ObjService.GetRunnning("sq002", 4);

        var strLON1 = selectedItems.GroupBy(c => new
        {
            c.Delivery_Date,
            c.Delivery_Priority,
            c.Order_No,
            c.Ship_To_Code
        })
        .Select(gcs => new
        {
            delivery_date = gcs.Key.Delivery_Date,
            delivery_priority = gcs.Key.Delivery_Priority,
            order_no = gcs.Key.Order_No,
            ship_to_code = gcs.Key.Ship_To_Code,
        }).ToList();

        Int32 iTotal = strLON1.Count;
        Int32 iCount = 0;
        Boolean bCheck;
        foreach (var recItem in strLON1)
        {
            DateTime delivery_date = (DateTime)recItem.delivery_date;
            Int32 delivery_priority = (Int32)recItem.delivery_priority;
            string order_no = recItem.order_no;
            string ship_to_code = recItem.ship_to_code;

            // Create Batch Order

            bCheck = false;
            bCheck = ObjService.CreateBatchOrder(delivery_date, delivery_priority, order_no, ship_to_code, strRunning);

            if (bCheck == true)
            {
                iCount++;
            }
            else
            {
                break;
            }
        }

        // Create Batch Setting
        if (iCount == iTotal)
        {
            bCheck = false;
            bCheck = ObjService.CreateBatchSetting(strRunning, 0);
        }
        else
        {
            bCheck = false;
            bCheck = ObjService.RollbackBatch(strRunning);
            Snackbar.Add("Create Wave >>  Order Losss", Severity.Error);
        }

        // Start Batch

        if (bCheck == true)
        {
            bCheck = false;
            bCheck = ObjService.StartBatchsetting(strRunning, 0);
        }

        if (bCheck == true)
        {
            Snackbar.Add("Create Wave >> Success", Severity.Success);
        }
        else
        {
            Snackbar.Add("Create Wave >> Start Losss", Severity.Error);
        }
        Elements = ObjService.GetSapStoreoutSetBatch();
    }
}
