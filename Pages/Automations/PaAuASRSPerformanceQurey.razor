@page "/wcs/asrsthroughput"

@using GoWMS.Server.Controllers;
@using GoWMS.Server.Models.Wcs;
@using GoWMS.Server.Data;

@inject WcsService ObjWcsService;
@inject NavigationManager navigationManager


@if (Elements != null)
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>
    <MudGrid>

        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="From Date" @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label="From Time" @bind-Time="fromTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="To Date" @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label="To Time" @bind-Time="toTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium">Search</MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Class="py-2">
        <MudTable Items="@Elements"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ? "500px" : "")"
                  Dense="@dense"
                  Hover="@hover"
                  Bordered="@bordered" Striped="@striped" Filter="new Func<AsrsPerformance, bool>(FilterFunc)" Style="width:100%;">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>MACHINE</MudTh>
                <MudTh>IN</MudTh>
                <MudTh>OUT</MudTh>
                <MudTh>TOTAL</MudTh>

            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="MACHINE">@context.Mccode</MudTd>
                <MudTd DataLabel="IN">@context.Inbound</MudTd>
                <MudTd DataLabel="OUT">@context.Outbound</MudTd>
                <MudTd DataLabel="TOTAL">@context.Total</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudGrid>

}


@code {
    private string mPagecaption { get; set; } = "ASRS Throughput";

    private IEnumerable<AsrsPerformance> Elements = new List<AsrsPerformance>();

    DateTime? fromDate = DateTime.Today;
    TimeSpan? fromTime = DateTime.Now.AddHours(-1).TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;



    DateTime? fromDateTime = DateTime.Today;
    DateTime? toDateTime = DateTime.Today.AddDays(1);

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";



    protected override async Task OnInitializedAsync()
    {
        WcsService objCS = new WcsService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        fromDateTime = fromDate.Value.Date + fromTime.Value;
        toDateTime = toDate.Value.Date + toTime.Value;


        Elements = await Task.Run(() => objCS.GetAsrsPerformance(fromDateTime.Value, toDateTime.Value));
    }

    bool FilterFunc(AsrsPerformance element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Mccode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void OnclickSearch()
    {
        DbGetData();
        StateHasChanged();
    }

    void DbGetData()
    {
        //timePortionDateTimePicker.Value

        DateTime newDateTimeFM = fromDate.Value.Date + fromTime.Value;
        DateTime newDateTimeTO = toDate.Value.Date + toTime.Value;


        // DateTime newDateTime = fromDate.Value.Date.Add(TimeSpan.Parse(fromTime.Value.ToShortTimeString()));



        Elements = ObjWcsService.GetAsrsPerformance(newDateTimeFM, newDateTimeTO);


    }

}
