@page "/5/5_6"

@using GoWMS.Server.Controllers;
@using GoWMS.Server.Models.Wcs;
@using GoWMS.Server.Data;
@using GoWMS.Server.Models;

@inject IStringLocalizer<PaAuASRSPerformanceQurey> L

@inject WcsService ObjWcsService
@inject UserServices OpjUserService
@inject NavigationManager navigationManager
@attribute [Authorize]


@if (Elements != null)
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>
    <MudGrid>

        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["FromDate"] @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label=@L["FromTime"] @bind-Time="fromTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["ToDate"] @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label=@L["ToTime"] @bind-Time="toTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton Disabled="@_processing" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium"
                       OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>@L["Search"]</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Class="py-2">
        <MudTable Items="@Elements"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ? "500px" : "")"
                  Dense="@dense"
                  Hover="@hover"
                  Bordered="@bordered" Striped="@striped" Filter="new Func<AsrsPerformance, bool>(FilterFunc)" Style="width:100%;">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" 
                              Placeholder=@L["Search"] Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@L["MACHINE"]</MudTh>
                <MudTh>@L["IN"]</MudTh>
                <MudTh>@L["OUT"]</MudTh>
                <MudTh>@L["TOTAL"]</MudTh>

            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel=@L["MACHINE"]>@context.Mccode</MudTd>
                <MudTd DataLabel=@L["IN"]>@context.Inbound</MudTd>
                <MudTd DataLabel=@L["OUT"]>@context.Outbound</MudTd>
                <MudTd DataLabel=@L["TOTAL"]>@context.Total</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudGrid>

}


@code {
    private string pageheader { get; set; } = "5.6.ASRS Throughput";

    public string mPagedesc { get; set; } = "5.6.ASRS Throughput";
    private string mPagename { get; set; } = "/5/5_6";

    private IEnumerable<AsrsPerformance> Elements = new List<AsrsPerformance>();

    DateTime? fromDate = DateTime.Today.AddDays(-1);
    TimeSpan? fromTime = DateTime.Now.TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;

    DateTime? fromDateTime = DateTime.Today.AddDays(-1);
    DateTime? toDateTime = DateTime.Today;

    private bool _processing = false;

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";

    private ResultReturn resultReturn = null;

    protected override async Task OnInitializedAsync()
    {
        WcsService objCS = new WcsService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        fromDateTime = fromDate.Value.Date + fromTime.Value;
        toDateTime = toDate.Value.Date + toTime.Value;


        Elements = await Task.Run(() => objCS.GetAsrsPerformance(fromDateTime.Value, toDateTime.Value));
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    bool FilterFunc(AsrsPerformance element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Mccode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    async Task OnclickSearch()
    {
        _processing = true;
        await DbGetData();
        _processing = false;
        this.StateHasChanged();
    }

    async Task DbGetData()
    {
        DateTime newDateTimeFM = fromDate.Value.Date + fromTime.Value;
        DateTime newDateTimeTO = toDate.Value.Date + toTime.Value;
        Elements = await Task.Run(() => ObjWcsService.GetAsrsPerformance(newDateTimeFM, newDateTimeTO));
    }


}
