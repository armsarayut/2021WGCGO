@page "/4/4_4_2"

@using GoWMS.Server.Controllers
@using GoWMS.Server.Models.Wcs
@using GoWMS.Server.Models
@using GoWMS.Server.Data
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider


@inject IStringLocalizer<PaAuRGVsurvey02> L
@inject ReportService UserlogService
@inject WcsService ObjWcsService
@inject UserServices OpjUserService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (Elements != null)
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudGrid>
        <MudItem xs="12">
            <br />
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true" Class="my-2">@McInfo</MudAlert>
        </MudItem>
        <MudItem xs="12">

            @{if (@McstatusAlarm)
                {
                    <MudAlert Severity="Severity.Error"
                              Variant="Variant.Filled"
                              Dense="true"
                              Style="@($"color:{FocColor}; background:{BakColor};")">
                        @McstatusNo - @McstatusDesc
                    </MudAlert>

                }
                else
                {

                    <MudAlert Severity="Severity.Normal"
                              Variant="Variant.Filled"
                              Dense="true"
                              Style="@($"color:{FocColor}; background:{BakColor};")">
                        @McstatusNo - @McstatusDesc
                    </MudAlert>
                }
            }
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <MudSelect T="string" Label=@L["GATEFROM"] HelperText=@L["PicktheGate"] MultiSelection="false" @bind-Value="valueFM">
                @foreach (var part in Elements)
                {
                    <MudSelectItem T="string" Value=@part.Mccode>@part.Mccode</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <MudSelect T="string" Label=@L["GATETO"] HelperText=@L["PicktheGate"] MultiSelection="false" @bind-Value="valueTO">
                @foreach (var part in Elements)
                {
                    <MudSelectItem T="string" Value=@part.Mccode>@part.Mccode</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.TransferWithinAStation" Color="Color.Error" OnClick="@(()=>SetPotocal())">@L["MOVE"]</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FirstPage" Color="Color.Error" OnClick="@(()=>SetComand(2))">@L["HOME-FONT"]</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LastPage" Color="Color.Error" OnClick="@(()=>SetComand(12))">@L["HOME-BACK"]</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DirectionsRun" Color="Color.Error" OnClick="@(()=>SetComand(1))">@L["RUN"]</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="@(()=>SetComand(90))">@L["STOP"]</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AlarmOff" Color="Color.Error" OnClick="@(()=>SetComand(9))">@L["ACKNOWLEDGE"]</MudButton>
        </MudItem>

    </MudGrid>

}


@code {
    public string pageheader { get; set; } = "4.4.2.RGV02-Survey";
    public string Mccode { get; set; } = "RGV02";
    public string mPagedesc { get; set; } = "4.4.2.RGV02-Survey";
    private string mPagename { get; set; } = "/4/4_4_2";

    public Int32 McstatusNo { get; set; }
    public bool McstatusAlarm { get; set; }
    public string McstatusDesc { get; set; }
    public string FocColor { get; set; }
    public string BakColor { get; set; }
    public string McInfo { get; set; }
    private HashSet<Vset_gate_rgv> selectedItems = new HashSet<Vset_gate_rgv>();
    private IEnumerable<Vset_gate_rgv> Elements = new List<Vset_gate_rgv>();

    List<Vmachine> ElementsBuff = new List<Vmachine>();

    private int value { get; set; } = 0;
    private HashSet<int> options { get; set; } = new HashSet<int>() { 0 };

    private string valueFM { get; set; } = "Nothing selected";
    private string valueTO { get; set; } = "Nothing selected";

    private string mPagecaption { get; set; } = "-";


    private int CommandMC { get; set; } = 0;

    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        mPagecaption = Mccode;
        Elements = await Task.Run(() => ObjWcsService.GetGateRgv());
        await Task.Run(() => ExecuteStatus());

    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    async void ExecuteStatus()
    {

        //ElementsBuff = ObjWcsService.GetAllMachine();
        ElementsBuff = await Task.Run(() => ObjWcsService.GetAllMachine());


        var listStatus = ElementsBuff.Where(a => a.Mccode == Mccode).ToList();

        foreach (var item in listStatus)
        {

            McstatusNo = item.St_no.Value;
            McstatusAlarm = item.Is_alert.Value;
            McstatusDesc = item.Desc_th.ToString();
            McInfo = item.Information.ToString();
            FocColor = item.Focecolor.ToString();
            BakColor = item.Backcolor.ToString();
        }

        InvokeAsync(StateHasChanged);
    }


    private async Task SetPotocal()
    {
        bool? result = await CheckRoleApprove();
        if (result==true)
        {
            var queryFM = (from c in Elements
                           where c.Mccode == valueFM
                           select new { c.St_no, c.Mccode }).Single();

            var queryTO = (from c in Elements
                           where c.Mccode == valueTO
                           select new { c.St_no, c.Mccode }).Single();

            int Gateno_FM = queryFM.St_no.Value;
            int Gateno_TO = queryTO.St_no.Value;

            if (Gateno_FM != null && Gateno_TO != null)
            {

                bool bRet;
                Int32 iCmd = 10;

                bRet = ObjWcsService.CreatePotocalMC(Mccode, Gateno_FM, Gateno_TO, 1, "WGC-SURVEY", 0, iCmd);

                this.InsertAuditrial("Setting " + Mccode + "- SURVEY Gate " + Gateno_FM.ToString() + ">>" + Gateno_TO.ToString(), pageheader);

            }
        }


    }

    private async Task SetComand(Int32 iCmd)
    {
        bool? result = await CheckRoleApprove();
        if (result == true)
        {
            bool bRet;
            bRet = ObjWcsService.CreateCommandMC(Mccode, iCmd);
            this.InsertAuditrial("Setting " + Mccode + "- Command" + iCmd.ToString(), pageheader);
        }

    }

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion


}
