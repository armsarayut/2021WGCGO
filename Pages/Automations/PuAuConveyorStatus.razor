@page "/4/4_1"
@using System.Runtime.Serialization;
@using Newtonsoft.Json;
@using GoWMS.Server.Controllers;
@using GoWMS.Server.Models.Wcs;
@using GoWMS.Server.Models;
@using System.Net.NetworkInformation;

@inject IStringLocalizer<PuAuConveyorStatus> L

@inject WcsService ObjWcsService;
@implements IDisposable;
@inject NavigationManager UriHelper
@inject IJSRuntime jsRuntime
@inject UtilityServices ObjUtitityservice
@inject IDialogService DialogService
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader </MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudIconButton OnClick="@(()=> NavigateToNewTabHHI(linkHmi1))"
                       Icon="@Icons.Material.Filled.TouchApp"
                       Variant="Variant.Filled"
                       Color="Color.Primary" Size="Size.Large" Class="ma-2" Title="HMI#1" />

        <MudIconButton OnClick="@(()=> NavigateToNewTabHHI(linkHmi2))"
                       Icon="@Icons.Material.Filled.TouchApp"
                       Variant="Variant.Filled"
                       Color="Color.Primary" Size="Size.Large" Class="ma-2" Title="HMI#2" />
        <MudSpacer />
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Vmachine,bool>(FilterFunc)"
              SortLabel=@L["SortBy"]>
        <ToolBarContent>
         
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Vmachine, object>(x=>x.Mccode)">@L["MCCODE"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vmachine, object>(x=>x.Information)">@L["INFO"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vmachine, object>(x=>x.St_no)">@L["STATUS"]</MudTableSortLabel></MudTh>
            <MudTh>@L["ACTION"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["MCCODE"]>@context.Mccode</MudTd>
            <MudTd DataLabel=@L["INFO"]>@context.Information</MudTd>
            <MudTd DataLabel=@L["STATUS"]>
                @{if (@context.Is_alert == true)
                        {
                        <MudAlert Severity="Severity.Error"
                                  Variant="Variant.Filled"
                                  Dense="true"
                                  Style="@($"color:{context.Focecolor}; background:{context.Backcolor};")">
                            @context.St_no - @context.Desc_th
                        </MudAlert>
                        }
                        else
                        {
                        <MudAlert Severity="Severity.Normal"
                                  Variant="Variant.Filled"
                                  Dense="true"
                                  Style="@($"color:{context.Focecolor}; background:{context.Backcolor};")">
                            @context.St_no - @context.Desc_th
                        </MudAlert>
                        }
                }
            </MudTd>

            <MudTd DataLabel=@L["ACTION"]>

                @if (@context.Is_cmd == true)
                    {
                    <MudFab @onclick="@(()=>OpenDialog(@context.Mccode))" Color="Color.Secondary" Icon="@Icons.Material.Filled.MenuOpen" Size="Size.Small" IconSize="Size.Small" />
                    }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private string pageheader = "4.1.ASRS-Status";
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private string McCommand { get; set; }
    private string setMcCommand { get; set; } = "wcs/mccmd/";

    public string mPagedesc { get; set; } = "4.1.ASRS-Status";
    private string mPagename { get; set; } = "/4/4_1";

    private string UrlHMI1 { get; set; } = "http://192.168.1.1:8080/";
    private string UrlHMI2 { get; set; } = "http://192.168.1.2:8080/";
    int linkHmi1 = 1;
    int linkHmi2 = 2;

    List<Vmachine> Elements = new List<Vmachine>();

    private ResultReturn resultReturn = null;


    private IEnumerable<SetConstance> ConstElements = new List<SetConstance>();


    void IDisposable.Dispose()
    {
        //while (bgWorker.IsBusy == true)
        //{ }
        timer.Enabled = false;
        timer.Dispose();
    }


    protected override async Task OnInitializedAsync()
    {


        ConstElements = await Task.Run(() => ObjWcsService.GetConstance());

        var result1 = ConstElements.Where(i => i.Set_code == "HMI001").FirstOrDefault(); // = 0
        var result2 = ConstElements.Where(i => i.Set_code == "HMI002").FirstOrDefault(); // = 0


        UrlHMI1 = result1.Val_vhr;
        UrlHMI2 = result2.Val_vhr;

        ExecuteStatus();

        await Task.Run(() => InitialTimer());

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////

    }

    async void ExecuteStatus()
    {
        Elements = ObjWcsService.GetAllMachine();
    }

    bool FilterFunc(Vmachine element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Mccode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Desc_th.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    #region timer
    System.Timers.Timer timer;
    void InitialTimer()
    {
        timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += TimerElapsed;
        timer.Enabled = true;
    }
    void TimerElapsed(Object source, System.Timers.ElapsedEventArgs e)
    {

        if (timer.Interval <= 1000)
            timer.Interval = 10000;

        ExecuteStatus();
        InvokeAsync(StateHasChanged);
    }
    #endregion

    private void SetCommand(string mccode)
    {

        if (mccode.Length > 0)
        {
            McCommand = setMcCommand + mccode;
            UriHelper.NavigateTo(McCommand);
        }

    }


    public async Task NavigateToNewTabHHI(int hmino)
    {
        string url = null;
        switch (hmino)
        {
            case 1:
                url = UrlHMI1;
                await jsRuntime.InvokeAsync<object>("open", url, "_blank");
                break;
            case 2:
                url = UrlHMI2;
                await jsRuntime.InvokeAsync<object>("open", url, "_blank");
                break;
            default:
                break;
        }

    }




    private void OpenDialog(string mccode)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseButton = true };
        var parameters = new DialogParameters { ["Mccode"] = mccode };


        var dialog = DialogService.Show<DialogKeyboardNavigationExample_Dialog>(mccode, parameters);


    }

}
