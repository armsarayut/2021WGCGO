@page "/5/5_5_6"

@using GoWMS.Server.Controllers;
@using GoWMS.Server.Models.Wcs;
@using GoWMS.Server.Data;
@using GoWMS.Server.Models;
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports

@inject IStringLocalizer<PaAuASRSLoadtimelist> L

@inject WcsService ObjWcsService
@inject UserServices OpjUserService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (Elements != null)
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>
    <MudGrid>

        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["FromDate"] @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label=@L["FromTime"] @bind-Time="fromTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["ToDate"] @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label=@L["ToTime"] @bind-Time="toTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton OnClick="OnclickSearch" 
                       Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium">@L["Search"]</MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Class="py-2">
        <MudTable Items="@Elements"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ? "500px" : "")"
                  Dense="@dense"
                  Hover="@hover"
                  Bordered="@bordered" Striped="@striped" Filter="new Func<AsrsLoadtime, bool>(FilterFunc)" Style="width:100%;">
            <ToolBarContent>
                <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                    <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                        <MudMenuItem @onclick="@DownloadExcelDocument">@L["EXCEL"]</MudMenuItem>
                        <MudMenuItem>@L["PDF"]</MudMenuItem>
                    </MudMenu>
                </MudTooltip>

                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder=@L["Search"] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@L["PALLET"]</MudTh>
                <MudTh>@L["TASKCODE"]</MudTh>
                <MudTh>@L["TASKTYPE"]</MudTh>
                <MudTh>@L["SRM"]</MudTh>
                <MudTh>@L["SOURCE"]</MudTh>
                <MudTh>@L["DESTINATION"]</MudTh>
                <MudTh>@L["START"]</MudTh>
                <MudTh>@L["END"]</MudTh>
                <MudTh>@L["TIME"]</MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel=@L["PALLET"]>@context.Lpncode</MudTd>
                <MudTd DataLabel=@L["TASKCODE"]>@context.Work_code</MudTd>
                <MudTd DataLabel=@L["TASKTYPE"]>@context.Work_text_th</MudTd>
                <MudTd DataLabel=@L["SRM"]>@string.Format(VarGlobals.FormatD2, context.Srm_no)</MudTd>
                <MudTd DataLabel=@L["SOURCE"]>@string.Format(VarGlobals.FormatD9, context.Srm_from)</MudTd>
                <MudTd DataLabel=@L["DESTINATION"]>@string.Format(VarGlobals.FormatD9, context.Srm_to)</MudTd>
                <MudTd DataLabel=@L["START"]>@Convert.ToDateTime(context.Stime).ToString(VarGlobals.FormatDT)</MudTd>
                <MudTd DataLabel=@L["END"]>@Convert.ToDateTime(context.Etime).ToString(VarGlobals.FormatDT)</MudTd>
                <MudTd DataLabel=@L["TIME"]>@context.Loadtime</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudGrid>

}


@code {
    private string pageheader { get; set; } = "5.5.6.ASRS-Loadtime";

    public string mPagedesc { get; set; } = "5.5.6.ASRS-Loadtime";
    private string mPagename { get; set; } = "/5/5_5_6";

    private IEnumerable<AsrsLoadtime> Elements = new List<AsrsLoadtime>();

    DateTime? fromDate = DateTime.Today;
    TimeSpan? fromTime = DateTime.Now.AddHours(-1).TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;



    DateTime? fromDateTime = DateTime.Today;
    DateTime? toDateTime = DateTime.Today.AddDays(1);

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";

    private ResultReturn resultReturn = null;


    protected override async Task OnInitializedAsync()
    {
        WcsService objCS = new WcsService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        fromDateTime = fromDate.Value.Date + fromTime.Value;
        toDateTime = toDate.Value.Date + toTime.Value;


        Elements = await Task.Run(() => objCS.GetAsrsloadtime(fromDateTime.Value, toDateTime.Value));

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    bool FilterFunc(AsrsLoadtime element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Lpncode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void OnclickSearch()
    {
        DbGetData();
        StateHasChanged();
    }

    void DbGetData()
    {
        //timePortionDateTimePicker.Value

        DateTime newDateTimeFM = fromDate.Value.Date + fromTime.Value;
        DateTime newDateTimeTO = toDate.Value.Date + toTime.Value;


        // DateTime newDateTime = fromDate.Value.Date.Add(TimeSpan.Parse(fromTime.Value.ToShortTimeString()));



        Elements = ObjWcsService.GetAsrsloadtime(newDateTimeFM, newDateTimeTO);


    }


    public async Task DownloadExcelDocument()
    {
        try
        {
            AsrsloadtimeRptExcel excelReport = new AsrsloadtimeRptExcel();
            List<AsrsLoadtime> listExcelReport = new List<AsrsLoadtime>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
