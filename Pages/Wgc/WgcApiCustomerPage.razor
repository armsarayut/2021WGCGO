@page "/9/9_4"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Wgc

@inject IStringLocalizer<WgcApiCustomerPage> L

@inject WgcService ObjErpService
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements" FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"600px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<CUSTOMERS,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" 
                          Placeholder=@L["Search"] 
                          Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" 
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>@L["CUSTOMER_CODE"]</MudTh>
            <MudTh>@L["CUSTOMER_NAME"]</MudTh>
                <MudTh>@L["STATUS"]</MudTh>
         </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel=@L["CUSTOMER_CODE"]>@context.CUSTOMER_CODE</MudTd>
            <MudTd DataLabel=@L["CUSTOMER_NAME"]>@context.CUST_NAME_THAI</MudTd>
            <MudTd DataLabel=@L["STATUS"]>@context.STATUS</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />

        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "9.4.Customers";
    private string mPagename { get; set; } = "/9/9_4";

    private string pageheader { get; set; } = "9.4.Customers";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private CUSTOMERS selectedItem = null;
    private HashSet<CUSTOMERS> selectedItems = new HashSet<CUSTOMERS>();
    private IEnumerable<CUSTOMERS> Elements = new List<CUSTOMERS>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    protected override async Task OnInitializedAsync()
    {
        WgcService objCS = new WgcService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllApiCustomerWgc());
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }


    private bool FilterFunc(CUSTOMERS element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CUSTOMER_CODE.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CUST_NAME_THAI.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.STATUS} ".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            //IbpGRNRptExcel excelReport = new IbpGRNRptExcel();
            //List<Inb_Goodreceipt_Go> listExcelReport = new List<Inb_Goodreceipt_Go>();
            //listExcelReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
