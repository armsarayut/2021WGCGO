@page "/3/3_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Wgc
@using System.Globalization
@using System.Reflection
@using System.Text.Json
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject WgcService ObjErpService
@inject ISnackbar Snackbar
@inject ErpApiService ObjApiService
@inject UserServices OpjUserService
@inject ReportService UserlogService
@inject IStringLocalizer<WgcBookingnotePage> L
@attribute [Authorize]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: left;
    }
</style>


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Done"
                   Color="Color.Success"
                   OnClick=@SelectOrder>@L["StartPick"]</MudButton>
                <MudSpacer />
            </MudAppBar>

            <MudTable Hover="@hover"
                      Breakpoint="Breakpoint.Sm"
                      Height="@(fixed_header || fixed_footer ?"500px":"")"
                      MultiSelection=@_multiSelect
                      FixedHeader="@fixed_header"
                      Items="@Elements"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-white)"
                      GroupFooterClass="mb-4"
                      Dense="@dense"
                      FixedFooter="@fixed_footer"
                      Bordered="@bordered"
                      Striped="@striped"
                      Filter="new Func<BOOKING_NOTE_ITEMS,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems">
                <ToolBarContent>
                    <MudToolBarSpacer />
                    <MudTextField @bind-Value="searchString1"
                                  Placeholder=@L["Search"]
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <ColGroup>
                    @if (_multiSelect)
                        {
                        <col style="width: 60px;" />
                        }
                    @if (_groupDefinition.Expandable)
                        {
                        <col style="width: 60px;" />
                        }
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                </ColGroup>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.SO_NO)">@L["SoNo"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.ITEM_CODE)">@L["ItemCode"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.CUSTOMER_CODE)">@L["Customer"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.DN_SEQ)">@L["Seq"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.LOT_NO)">@L["LotNo"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.BATCH_NO)">@L["BatchNo"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.PACKETING_CODE)">@L["Qty"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.DN_QTY)">@L["Unit"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.DN_UM)">@L["Location"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<BOOKING_NOTE_ITEMS, object>(x=>x.PALLET_GO)">@L["PalletGo"]</MudTableSortLabel></MudTh>

                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="10">@($"{context.GroupName}: {context.Key}") @L["TotalQuantity"]: @string.Format(VarGlobals.FormatN0, @context.Items.Sum((e) => e.DN_QTY))</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="@L["SoNo"]">@context.SO_NO</MudTd>
                    <MudTd DataLabel="@L["ItemCode"]">@context.ITEM_CODE</MudTd>
                    <MudTd DataLabel="@L["Customer"]">@context.CUSTOMER_CODE</MudTd>
                    <MudTd DataLabel="@L["Seq"]">@context.DN_SEQ</MudTd>
                    <MudTd DataLabel="@L["LotNo"]">@context.LOT_NO</MudTd>
                    <MudTd DataLabel="@L["BatchNo"]">@context.BATCH_NO</MudTd>
                    <MudTd DataLabel="@L["Packeting"]">@context.PACKETING_CODE</MudTd>
                    <MudTd DataLabel="@L["Qty"]">@context.DN_QTY</MudTd>
                    <MudTd DataLabel="@L["Unit"]">@context.DN_UM</MudTd>
                    <MudTd DataLabel="@L["PalletGo"]">@context.PALLET_GO</MudTd>
                </RowTemplate>
                <GroupFooterTemplate>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="1">@L["TotalQuantity"]: @string.Format(VarGlobals.FormatN0, @context.Items.Sum((e) => e.DN_QTY))</MudTh>
                </GroupFooterTemplate>
            </MudTable>

        }

@code {
    private bool _dense = true;
    private bool _multiSelect = true;
    public string mPagedesc { get; set; } = "3.1.Order Booking";
    private string mPagename { get; set; } = "/3/3_1";

    private string pageheader { get; set; } = "3.1.Order Booking";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private string searchString1 = "";
    private BOOKING_NOTE_ITEMS selectedItem = null;
    private HashSet<BOOKING_NOTE_ITEMS> selectedItems = new HashSet<BOOKING_NOTE_ITEMS>();
    private IEnumerable<BOOKING_NOTE_ITEMS> Elements = new List<BOOKING_NOTE_ITEMS>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    private TableGroupDefinition<BOOKING_NOTE_ITEMS> _groupDefinition = new()
    {
        GroupName = "Order",
        Indentation = true,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.SO_NO
    };

    protected override async Task OnInitializedAsync()
    {
        WgcService objCS = new WgcService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetAllApiNewBookingnoteWgc());

     
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private bool FilterFunc1(BOOKING_NOTE_ITEMS element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BOOKING_NOTE_ITEMS element, string searchString)
    {

        if (element.SO_NO.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        else if (string.IsNullOrWhiteSpace(searchString))
            return true;
        else if ($"{element.ITEM_NAME} {element.LOT_NO} {element.BATCH_NO}".Contains(searchString))
            return true;
        return false;
    }



    private async void SelectOrder()
    {
        bool? result = await CheckRoleAdd();
        if (result == true)
        {
            var serializeOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true
            };
            // For Sim Test
            /*
            string pallet = "WGC-001503";
            string pack = "289";
            string mat = "MP1095O";
            string matDesc = "Organaic Maltodextrin Powder";
            */
            //var strRES = selectedItems.OrderBy(x => x.SEQ_NO).Select(x => new { efidx = x.SEQ_NO, quantity = x.DN_QTY, packageid = pack, materialcode = mat, palletno = pallet, sono = x.SO_NO, customer = x.CUSTOMER_CODE, lotno = x.LOT_NO, batchno = x.BATCH_NO, matematerialdescription = matDesc, unit = x.DN_UM, deliverydate = x.REQUEST_DATE }).ToList();
            //-------------------------

            // For Production
            var strRES = selectedItems.OrderBy(x => x.SEQ_NO).Select(x => new { efidx = x.SEQ_NO, quantity = x.DN_QTY, packageid = x.DN_SEQ, materialcode = x.ITEM_CODE, palletno = x.PALLET_GO, sono = x.SO_NO, customer = x.CUSTOMER_CODE, lotno = x.LOT_NO, batchno = x.BATCH_NO, matematerialdescription = x.ITEM_NAME, unit = x.DN_UM, deliverydate = x.REQUEST_DATE }).ToList();
            //-----------------

            var jsonRES = JsonSerializer.Serialize(strRES, serializeOptions);

            var iReturn = 0;
            var sReturn = "Call";



            ObjApiService.SetPickWgc(jsonRES, ref iReturn, ref sReturn);
            this.InsertAuditrial("Create Order picking ", pageheader);
            if (selectedItems.Count > 0)
            {
                if (iReturn == 0)
                {
                    Snackbar.Add(sReturn, Severity.Error);
                }
                else
                {

                    await ObjErpService.UpdateNewBooking_notebylist(selectedItems.ToList());

                    this.InsertAuditrial("Update Order picking to ERP ", pageheader);

                    Snackbar.Add("Order picking created", Severity.Success);

                    this.InsertAuditrial("Order picking Created", pageheader);

                }
            }
            else
            {
                Snackbar.Add("Please select order picking", Severity.Warning);
            }
        }

    }

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion

}
