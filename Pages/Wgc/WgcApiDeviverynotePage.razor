@page "/9/9_2"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Wgc
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<WgcApiDeviverynotePage> L

@inject WgcService ObjErpService
@inject UserServices OpjUserService
@inject ReportService UserlogService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        @*
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>*@
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              HorizontalScrollbar="true"
              Filter="new Func<DELIVERY_NOTE_ITEMS,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>@L["SEQ_NO"]</MudTh>
            <MudTh>@L["DN_NO"]</MudTh>
            <MudTh>@L["DN_DATE"]</MudTh>
            <MudTh>@L["ITEM_CODE"]</MudTh>
            <MudTh>@L["ITEM_NAME"]</MudTh>
            <MudTh>@L["DN_QTY"]</MudTh>
            <MudTh>@L["DN_UM"]</MudTh>
            <MudTh>@L["CUSTOMER_CODE"]</MudTh>
            <MudTh>@L["PACKETING_CODE"]</MudTh>
            <MudTh>@L["LOT_NO"]</MudTh>
            <MudTh>@L["CUSTOMER_ITEM"]</MudTh>
            <MudTh>@L["STICKER_CODE"]</MudTh>
            <MudTh>@L["SCREEN_CODE"]</MudTh>
            <MudTh>@L["SUBCUSTOMER_CODE"]</MudTh>
            <MudTh>@L["PALLET_GO"]</MudTh>
            <MudTh>@L["STATUS_GO"]</MudTh>
            <MudTh>@L["CREATED_DATE"]</MudTh>
            <MudTh>@L["UPDATE_DATE"]</MudTh>
            <MudTh>@L["REMARK"]</MudTh>
            <MudTh>@L["REMARK_INV"]</MudTh>
            <MudTh>@L["STATUS"]</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel=@L["SEQ_NO"]>@context.SEQ_NO</MudTd>
            <MudTd DataLabel=@L["DN_NO"]>@context.DN_NO</MudTd>
            <MudTd DataLabel=@L["DN_DATE"]>@context.DN_DATE</MudTd>
            <MudTd DataLabel=@L["ITEM_CODE"]>@context.ITEM_CODE</MudTd>
            <MudTd DataLabel=@L["ITEM_NAME"]>@context.ITEM_NAME</MudTd>
            <MudTd DataLabel=@L["DN_QTY"]>@context.DN_UM</MudTd>
            <MudTd DataLabel=@L["CUSTOMER_CODE"]>@context.CUSTOMER_CODE</MudTd>
            <MudTd DataLabel=@L["PACKETING_CODE"]>@context.PACKETING_CODE</MudTd>
            <MudTd DataLabel=@L["LOT_NO"]>@context.LOT_NO</MudTd>
            <MudTd DataLabel=@L["CUST_ITEM_CODE"]>@context.CUST_ITEM_CODE</MudTd>
            <MudTd DataLabel=@L["STICKER_CODE"]>@context.STICKER_CODE</MudTd>
            <MudTd DataLabel=@L["SCREEN_CODE"]>@context.SCREEN_CODE</MudTd>
            <MudTd DataLabel=@L["SUB_CUSTOMER_CODE"]>@context.SUB_CUSTOMER_CODE</MudTd>
            <MudTd DataLabel=@L["PALLET_GO"]>@context.PALLET_GO</MudTd>
            <MudTd DataLabel=@L["STATUS_GO"]>@context.STATUS_GO</MudTd>
            <MudTd DataLabel=@L["CREATED_DATE"]>@context.CREATED_DATE</MudTd>
            <MudTd DataLabel=@L["UPDATE_DATE_GO"]>@context.UPDATE_DATE_GO</MudTd>
            <MudTd DataLabel=@L["REMARK"]>@context.REMARKS</MudTd>
            <MudTd DataLabel=@L["REMARK INV"]>@context.REMARKS_INV</MudTd>
            <MudTd DataLabel=@L["STATUS"]>@context.STATUS</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />

        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "9.2.DeliveryNote";
    private string mPagename { get; set; } = "/9/9_2";

    private string pageheader { get; set; } = "9.2.DeliveryNote";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private DELIVERY_NOTE_ITEMS selectedItem = null;
    private HashSet<DELIVERY_NOTE_ITEMS> selectedItems = new HashSet<DELIVERY_NOTE_ITEMS>();
    private IEnumerable<DELIVERY_NOTE_ITEMS> Elements = new List<DELIVERY_NOTE_ITEMS>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WgcService objCS = new WgcService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetAllApiDeliverynoteWgc());
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private bool FilterFunc(DELIVERY_NOTE_ITEMS element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PALLET_GO.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DN_NO.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.ITEM_CODE} {element.SEQ_NO} {element.JOB_NO}".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                //IbpGRNRptExcel excelReport = new IbpGRNRptExcel();
                //List<Inb_Goodreceipt_Go> listExcelReport = new List<Inb_Goodreceipt_Go>();
                //listExcelReport = Elements.ToList();
                //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
            }

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
                //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
                //listPdfReport = Elements.ToList();
                //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
                ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
                //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
            }


        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion

}
