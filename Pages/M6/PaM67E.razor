@page "/5/5_5_5"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Public
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports
@inject IJSRuntime JSRuntime

@inject IStringLocalizer<PaM67E> L
@inject PublicService ObjPublicService
@inject ReportService UserlogService
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>
    <MudGrid>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["FromDate"] @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label=@L["ToDate"] @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton Disabled="@_processing" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium"
                       OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>@L["Search"]</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Class6_7_F,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0">
            </MudTextField>

        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W_date)">@L["DATE"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.Wtotal)">@L["TOTAL"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W01)">@L["STORE-IN"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W05)">@L["STORE-OUT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W101)">@L["EMPTY-IN"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W102)">@L["EMPTY-OUT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W09)">@L["MOVE"]</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["DATE"]>@Convert.ToDateTime(context.W_date).ToString(VarGlobals.FormatD)</MudTd>
            <MudTd DataLabel=@L["TOTAL"]>@context.Wtotal</MudTd>
            <MudTd DataLabel=@L["STORE-IN"]>@context.W01</MudTd>
            <MudTd DataLabel=@L["STORE-OUT"]>@context.W05</MudTd>
            <MudTd DataLabel=@L["EMPTY-IN"]>@context.W101</MudTd>
            <MudTd DataLabel=@L["EMPTY-OUT"]>@context.W102</MudTd>
            <MudTd DataLabel=@L["MOVE"]>@context.W09</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "5.5.5.ASRS-End of day";
    private string mPagename { get; set; } = "/5/5_5_5";

    private string msgAction = "Enter Palletcode";
    private string pageheader = "5.5.5.ASRS-End of day";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Class6_7_F selectedItem = null;
    private HashSet<Class6_7_F> selectedItems = new HashSet<Class6_7_F>();
    private IEnumerable<Class6_7_F> Elements = new List<Class6_7_F>();
    private IEnumerable<Class6_7_F> Elementsource = new List<Class6_7_F>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    DateTime? fromDate = DateTime.Today.AddDays(-1);
    TimeSpan? fromTime = DateTime.Now.TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;

    DateTime? fromDateTime = DateTime.Today.AddDays(-1);
    DateTime? toDateTime = DateTime.Today;

    private bool _processing = false;


    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);


    protected override async Task OnInitializedAsync()
    {
        PublicService objCS = new PublicService();

        fromDateTime = fromDate.Value.Date;
        toDateTime = toDate.Value.Date;
        Elements = await Task.Run(() => objCS.GetMenu6_7Fbydate(fromDateTime.Value, toDateTime.Value));

        Elements = Elementsource;

        this.InsertAuditrial("View", pageheader);
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                //ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                //ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Class6_7_F element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        // if (element.W_Count.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (element.Desc_Th.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        //if ($"{element.Create_By}".Contains(searchString))
        //    return true;
        return false;
    }

    async Task OnclickSearch()
    {
        _processing = true;
        await DbGetData();
        _processing = false;
        this.StateHasChanged();
    }

    async Task DbGetData()
    {
        DateTime newDateTimeFM = fromDate.Value.Date;
        DateTime newDateTimeTO = toDate.Value.Date;
        Elements = await Task.Run(() => ObjPublicService.GetMenu6_7Fbydate(newDateTimeFM, newDateTimeTO));
    }


    public void Dispose()
    {

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname);
    }

    void setFindDate(bool bOk)
    {
        _picker.Close();

        if (bOk)
        {
            DateTime dtStart = _dateRange.Start.Value;
            DateTime dtEnd = _dateRange.End.Value;
            Elements = Elementsource.Where(x => x.W_date >= dtStart.Date && x.W_date <= dtEnd.Date).ToList();
            StateHasChanged();
        }
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            PaM67ERptExcel excelReport = new PaM67ERptExcel();
            List<Class6_7_F> listExcelReport = new List<Class6_7_F>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }
}
