@page "/5/5_5_5"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Public

@inject IStringLocalizer<PaM67E> L
@inject PublicService ObjPublicService
@inject ReportService UserlogService
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mMenudesc</MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudMenu Icon="@Icons.Filled.FileDownload" Color="Color.Inherit">
                <MudMenuItem OnClick="DownloadExcelDocument">@L["EXCEL"]</MudMenuItem>
                <MudMenuItem OnClick="DownloadPdfDocument">@L["PDF"]</MudMenuItem>
            </MudMenu>
        </MudTooltip>
        <MudSpacer />
    </MudAppBar>
    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"600px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Class6_7_F,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudGrid>
                <MudSpacer />
                <MudItem xs=6>
                    <MudDateRangePicker @ref="_picker"
                                        Label=@L["SearchDate"]
                                        @bind-DateRange="_dateRange"
                                        DateFormat="@VarGlobals.FormatD">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">@L["Clear"]</MudButton>
                            <MudButton OnClick="@(() => setFindDate(false))">@L["Cancel"]</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() => setFindDate(true))">@L["Ok"]</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudItem>
                <MudItem xs=6>
                    <MudTextField @bind-Value="searchString"
                                  Placeholder=@L["Search"]
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0">
                    </MudTextField>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W_date)">@L["DATE"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.Wtotal)">@L["TOTAL"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W01)">@L["STORE-IN"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W05)">@L["STORE-OUT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W101)">@L["EMPTY-IN"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W102)">@L["EMPTY-OUT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_7_F, object>(x=>x.W09)">@L["MOVE"]</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["DATE"]>@Convert.ToDateTime(context.W_date).ToString(VarGlobals.FormatD)</MudTd>
            <MudTd DataLabel=@L["TOTAL"]>@context.Wtotal</MudTd>
            <MudTd DataLabel=@L["STORE-IN"]>@context.W01</MudTd>
            <MudTd DataLabel=@L["STORE-OUT"]>@context.W05</MudTd>
            <MudTd DataLabel=@L["EMPTY-IN"]>@context.W101</MudTd>
            <MudTd DataLabel=@L["EMPTY-OUT"]>@context.W102</MudTd>
            <MudTd DataLabel=@L["MOVE"]>@context.W09</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "5.5.5.ASRS-End of day";
    private string mPagename { get; set; } = "/5/5_5_5";

    private string msgAction = "Enter Palletcode";
    private string mMenudesc = "5.5.5.ASRS-End of day";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Class6_7_F selectedItem = null;
    private HashSet<Class6_7_F> selectedItems = new HashSet<Class6_7_F>();
    private IEnumerable<Class6_7_F> Elements = new List<Class6_7_F>();
    private IEnumerable<Class6_7_F> Elementsource = new List<Class6_7_F>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);


    protected override async Task OnInitializedAsync()
    {
        PublicService objCS = new PublicService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elementsource = await Task.Run(() => objCS.GetAllMenu6_7F());
        Elements = Elementsource;

        this.InsertAuditrial("View", mMenudesc);
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                //ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                //ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Class6_7_F element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        // if (element.W_Count.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (element.Desc_Th.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        //if ($"{element.Create_By}".Contains(searchString))
        //    return true;
        return false;
    }

    public void Dispose()
    {

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname);
    }

    void setFindDate(bool bOk)
    {
        _picker.Close();

        if (bOk)
        {
            DateTime dtStart = _dateRange.Start.Value;
            DateTime dtEnd = _dateRange.End.Value;
            Elements = Elementsource.Where(x => x.W_date >= dtStart.Date && x.W_date <= dtEnd.Date).ToList();
            StateHasChanged();
        }
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            //IbpGRNRptExcel excelReport = new IbpGRNRptExcel();
            //List<Inb_Goodreceipt_Go> listExcelReport = new List<Inb_Goodreceipt_Go>();
            //listExcelReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }
}
