@page "/5/5_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Public
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports

@inject IJSRuntime JSRuntime
@inject IStringLocalizer<PaM6> L
@inject PublicService ObjPublicService
@inject ReportService UserlogService
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>


    
<MudGrid>

    <MudItem Class="d-flex flex-row">
        <MudItem>
            <MudDatePicker Class="" Label=@L["FromDate"] @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
        </MudItem>
        <MudItem>
            <MudTimePicker Class="px-2" Label=@L["FromTime"] @bind-Time="fromTime" />
        </MudItem>
    </MudItem>
    <MudItem Class="d-flex flex-row">
        <MudItem>
            <MudDatePicker Class="" Label=@L["ToDate"] @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
        </MudItem>
        <MudItem>
            <MudTimePicker Class="px-2" Label=@L["ToTime"] @bind-Time="toTime" />
        </MudItem>
    </MudItem>
    <MudItem Class="d-flex flex-row align-self-end">
        <MudButton Disabled="@_processing" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium"
                   OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>@L["Search"]</MudText>
            }
        </MudButton>
    </MudItem>
</MudGrid>

<MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
    <MudSpacer />
    <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
        <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
        <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
    </MudTooltip>
</MudAppBar>

<MudTable Items="@Elements"
          FixedHeader="@fixed_header"
          FixedFooter="@fixed_footer"
          Height="@(fixed_header || fixed_footer ?"500px":"")"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped"
          Filter="new Func<Class6_1,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString"
                      Placeholder=@L["Search"]
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Class6_1, object>(x=>x.Created)">@L["DATETIME"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Class6_1, object>(x=>x.Menu_Name)">@L["MENU"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Class6_1, object>(x=>x.Action_Desc)">@L["ACTION"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Class6_1, object>(x=>x.Usid)">@L["ACTOR"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Class6_1, object>(x=>x.Client_ip)">@L["IPADDRESS"]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=@L["DATETIME"]>@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
        <MudTd DataLabel=@L["MENU"]>@context.Menu_Name</MudTd>
        <MudTd DataLabel=@L["ACTION"]>@context.Action_Desc</MudTd>
        <MudTd DataLabel=@L["ACTOR"]>@context.Usid</MudTd>
        <MudTd DataLabel=@L["IPADDRESS"]>@context.Client_ip</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />

    </PagerContent>
</MudTable>
}

@code {

    public string mPagedesc { get; set; } = "5.1.Audit trail";
    private string mPagename { get; set; } = "/5/5_1";

    private string msgAction = "Enter Palletcode";
    private string pageheader = "5.1.Audit trail";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Class6_1 selectedItem = null;
    private HashSet<Class6_1> selectedItems = new HashSet<Class6_1>();
    private IEnumerable<Class6_1> Elements = new List<Class6_1>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;


    DateTime? fromDate = DateTime.Today.AddDays(-1);
    TimeSpan? fromTime = DateTime.Now.TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;



    DateTime? fromDateTime = DateTime.Today.AddDays(-1);
    DateTime? toDateTime = DateTime.Today;

    private bool _processing = false;

    protected override async Task OnInitializedAsync()
    {
        PublicService objCS = new PublicService();

        fromDateTime = fromDate.Value.Date + fromTime.Value;
        toDateTime = toDate.Value.Date + toTime.Value;





        Elements = await Task.Run(() => objCS.GetMenu6_1bydate(fromDateTime.Value, toDateTime.Value));

        this.InsertAuditrial("View", pageheader);

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                //ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                //ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Class6_1 element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Menu_Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Action_Desc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Usid.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Client_ip}".Contains(searchString))
            return true;
        return false;
    }


    async Task OnclickSearch()
    {
        _processing = true;
        await DbGetData();
        _processing = false;
        this.StateHasChanged();
    }

    async Task DbGetData()
    {
        DateTime newDateTimeFM = fromDate.Value.Date + fromTime.Value;
        DateTime newDateTimeTO = toDate.Value.Date + toTime.Value;
        Elements = await Task.Run(() => ObjPublicService.GetMenu6_1bydate(newDateTimeFM, newDateTimeTO));
    }



    public void Dispose()
    {

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname);
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            PaM6RptExcel excelReport = new PaM6RptExcel();
            List<Class6_1> listExcelReport = new List<Class6_1>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
