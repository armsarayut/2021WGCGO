@page "/7/7_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas

@inject IStringLocalizer<MasPrivilege> L
@inject UserServices OpjUserService
@attribute [Authorize]

@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"600px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              ReadOnly="@ronly"
              CanCancelEdit="@canCancelEdit"
              Filter="new Func<UserPrivilege,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
              SortLabel=@L["SortBy"]>
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Ugdesc)">@L["GROUP"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Menu_desc)">@L["MENU"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_acc)">@L["ACCESS"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_add)">@L["ADD"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_edit)">@L["EDIT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_del)">@L["DELETE"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_rpt)">@L["REPORT"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserPrivilege, object>(x=>x.Role_apv)">@L["APPROVE"]</MudTableSortLabel></MudTh>
            <MudTh>@L["ACTION"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["GROUP"]>@context.Ugdesc</MudTd>
            <MudTd DataLabel=@L["MENU"]>@context.Menu_desc</MudTd>
            <MudTd DataLabel=@L["ACCESS"]><MudCheckBox @bind-Checked="@context.Role_acc" /></MudTd>
            <MudTd DataLabel=@L["ADD"]><MudCheckBox @bind-Checked="@context.Role_add" /></MudTd>
            <MudTd DataLabel=@L["EDIT"]><MudCheckBox @bind-Checked="@context.Role_edit" /></MudTd>
            <MudTd DataLabel=@L["DELETE"]><MudCheckBox @bind-Checked="@context.Role_del" /></MudTd>
            <MudTd DataLabel=@L["REPORT"]><MudCheckBox @bind-Checked="@context.Role_rpt" /></MudTd>
            <MudTd DataLabel=@L["APPROVE"]><MudCheckBox @bind-Checked="@context.Role_apv" /></MudTd>


            <MudTd Class="clm-row-small" DataLabel=@L["ACTION"]>
                <MudFab @onclick="@(()=>Commitconstance(@context.Idx.Value, @context.Role_acc.Value , @context.Role_add.Value, @context.Role_edit.Value, @context.Role_del.Value , @context.Role_rpt.Value, @context.Role_apv.Value))" Color="Color.Primary" Icon="@Icons.Material.Filled.Save" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Refreshconstance())" Color="Color.Secondary" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {

    public string mPagedesc { get; set; } = "7.1.Privileges";
    private string mPagename { get; set; } = "/7/7_1";

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "7.1.Privileges";

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private bool ronly = false;
    private bool canCancelEdit = true;

    private UserPrivilege selectedItem = null;
    private HashSet<UserPrivilege> selectedItems = new HashSet<UserPrivilege>();
    private IEnumerable<UserPrivilege> Elements = new List<UserPrivilege>();
    public int elevation = 0;
    private ResultReturn resultReturn = null;

    protected override async Task OnInitializedAsync()
    {
        UserServices objCS = new UserServices();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetPrivilegeAll());
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}
        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(UserPrivilege element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Ugdesc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Menu_desc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Commitconstance(long idx, bool acc, bool add, bool edi, bool del, bool rpt, bool apv)
    {

        bool bcheck = OpjUserService.SetPrivilege(idx, acc, add, edi, del, rpt, apv);

        Refreshconstance();

    }

    private void Refreshconstance()
    {
        Elements = OpjUserService.GetPrivilegeAll();
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            //IbpGRNRptExcel excelReport = new IbpGRNRptExcel();
            //List<Inb_Goodreceipt_Go> listExcelReport = new List<Inb_Goodreceipt_Go>();
            //listExcelReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
