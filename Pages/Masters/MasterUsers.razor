@page "/7/7_2"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject IStringLocalizer<MasterUsers> L
@inject UserServices OpjUserService
@inject IDialogService DialogService
@inject ReportService UserlogService
@attribute [Authorize]

@if (Elements == null)
{
    //<p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Userinfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
              SortLabel=@L["SortBy"]>
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Userinfo, object>(x=>x.Usgrp)">@L["GROUP"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Userinfo, object>(x=>x.UserId)">@L["USERID"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Userinfo, object>(x=>x.Usname)">@L["USERNAME"]</MudTableSortLabel></MudTh>
            <MudTh>@L["EDIT"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["GROUP"]>@context.Usgrp</MudTd>
            <MudTd DataLabel=@L["USERID"]>@context.UserId</MudTd>
            <MudTd DataLabel=@L["USERNAME"]>@context.Usname</MudTd>
            <MudTd Class="clm-row-small" DataLabel=@L["EDIT"]>
                <MudFab @onclick="@(()=>OpenDialog(@context.Uspass,@context.Usname,@context.UserId ))" Color="Color.Secondary" Icon="@Icons.Material.Filled.ModeEdit" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "7.2.User";
    private string mPagename { get; set; } = "/7/7_2";

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "7.2.User";

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Userinfo selectedItem = null;
    private HashSet<Userinfo> selectedItems = new HashSet<Userinfo>();
    private IEnumerable<Userinfo> Elements = new List<Userinfo>();
    public int elevation = 0;
    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        UserServices objCS = new UserServices();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);

        Elements = await Task.Run(() => objCS.GetUserAll());
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private void setstr(string str)
    {

    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Userinfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Usname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Usgrp.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenDialog(string mpass, string musername, string memail)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseButton = true };
        var parameters = new DialogParameters();
        parameters.Add("MPassword", mpass);
        parameters.Add("MUsername", musername);
        parameters.Add("MEmail", memail);

        var dialog = DialogService.Show<DialogResetUser>("USER EDIT", parameters);

    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            MasterUsersRptExcel excelReport = new MasterUsersRptExcel();
            List<Userinfo> listExcelReport = new List<Userinfo>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            //IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //List<Inb_Goodreceipt_Go> listPdfReport = new List<Inb_Goodreceipt_Go>();
            //listPdfReport = Elements.ToList();
            //var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            ////await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }
}
