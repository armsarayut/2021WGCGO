
@using GoWMS.Server.Data;
@using GoWMS.Server.Controllers
@using NETCore.Encrypt;
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas
@using Microsoft.Extensions.Configuration
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject UserServices ObjUserService
@inject ReportService UserlogService
@inject NavigationManager navigationManager

<MudDialog>
    <DialogContent>

        <MudText Typo="Typo.h4" GutterBottom="true">@MEmail</MudText>

        <MudTextField @bind-Value="@MUsername" T="string" Label="Username" Variant="Variant.Outlined" Class="my-4"></MudTextField>

        <MudTextField @bind-Value="@MPassword" Label="New Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Class="my-4" />

        <MudSelect Label="GROUP" HelperText="Pick the GROUP" @bind-SelectedValues="selectedItems">
            @foreach (var cmd in Elements)
            {
                <MudSelectItem Value="@cmd">@cmd.Ugdesc</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string MPassword { get; set; }
    [Parameter] public string MUsername { get; set; }
    [Parameter] public string MEmail { get; set; }

    /*
            string MPassword { get; set; }
            string MUsername { get; set; }
            string MEmail { get; set; }
    */
    private HashSet<Usergroups> selectedItems = new HashSet<Usergroups>();
    private IEnumerable<Usergroups> Elements = new List<Usergroups>();

    private ResultReturn resultReturn = null;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private readonly string pageheader = "7.2.User";
    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var key = Configuration.GetSection("Appkey")["Pass"].ToString();
        //var encrypted = Security.EncryptString(Password, key);
        var encrypted = EncryptProvider.DESDecrypt(MPassword, key);
        MPassword = encrypted;
        await GetUserAthu();
        Elements = await Task.Run(() => ObjUserService.GetUsergroups());

    }

    private async Task Submit()
    {

        if (selectedItems != null)
        {

            long iCmd = 0;
            string sGroup = "";
            foreach (var item in selectedItems)
            {
                iCmd = item.Idx.Value;
                sGroup = item.Ugdesc;
            }

            var key = Configuration.GetSection("Appkey")["Pass"].ToString();
            //var encrypted = Security.EncryptString(Password, key);
            var encrypted = EncryptProvider.DESEncrypt(MPassword, key);


            resultReturn = await Task.Run(() => ObjUserService.UpsertRegister(iCmd, MEmail, encrypted, MUsername));

            if (resultReturn.Bret == true)
            {
                this.InsertAuditrial("Setting User : " + MEmail + " in Usergroup : " + sGroup, pageheader);

                MudDialog.Close(DialogResult.Ok(true));
            }

        }



    }

    void Cancel() => MudDialog.Cancel();

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }
}
