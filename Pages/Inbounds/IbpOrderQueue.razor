@page "/1/1_2"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Pdf
@using GoWMS.Server.Data
@using GoWMS.Server.Reports
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inb
@using GoWMS.Server.Controllers

@inject IJSRuntime JSRuntime
@inject InboundService ObjInboundService
@inject UserServices OpjUserService
@inject IStringLocalizer<IbpOrderQueue> L
@attribute [Authorize]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: left;
    }
</style>

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Hover="@hover" Breakpoint="Breakpoint.Sm" Height="@(fixed_header || fixed_footer ?"600px":"")" FixedHeader="@fixed_header"
              Items="@Elements"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background-white)"
              GroupFooterClass="mb-4"
              Dense="@dense"
              FixedFooter="@fixed_footer"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Inb_Goodreceive_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>

            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" 
                          Placeholder=@L["Search"] 
                          Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <ColGroup>
            @if (_multiSelect)
                {
                <col style="width: 60px;" />
                }
            @if (_groupDefinition.Expandable)
                {
                <col style="width: 60px;" />
                }
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>@L["GRDatetime"]</MudTh>
            <MudTh>@L["DNDate"]</MudTh>
            <MudTh>@L["DNNo"]</MudTh>
            <MudTh>@L["ItemCode"]</MudTh>
            <MudTh>@L["ItemName"]</MudTh>
            <MudTh>@L["Qty"]</MudTh>
            <MudTh>@L["Unit"]</MudTh>
            <MudTh>@L["Weight"]</MudTh>
            <MudTh>@L["LotNo"]</MudTh>
            <MudTh>@L["BatchNo"]</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="10">@($"{context.GroupName}: {context.Key} ") Total: @string.Format(VarGlobals.FormatN0, @context.Items.Sum((e) => e.Quantity))</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="@L["GRDatetime"]">@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd DataLabel="@L["DNDate"]">@Convert.ToDateTime(context.Docdate).ToString(VarGlobals.FormatD)</MudTd>
            <MudTd DataLabel="@L["DNNo"]">@context.Pono</MudTd>
            <MudTd DataLabel="@L["ItemCode"]">@context.Itemcode</MudTd>
            <MudTd DataLabel="@L["ItemName"]">@context.Itemname</MudTd>
            <MudTd DataLabel="@L["Qty"]" Style="text-align: right">@string.Format(VarGlobals.FormatN0, context.Quantity)</MudTd>
            <MudTd DataLabel="@L["Unit"]">@context.Unit</MudTd>
            <MudTd DataLabel="@L["Weight"]" Style="text-align: right">@string.Format(VarGlobals.FormatN2, context.Weight)</MudTd>
            <MudTd DataLabel="@L["LotNo"]">@context.Docno</MudTd>
            <MudTd DataLabel="@L["BatchNo"]">@context.Docnote</MudTd>

        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="10">Total Quantity: @string.Format(VarGlobals.FormatN0, @context.Items.Sum((e) => e.Quantity)) </MudTh>
        </GroupFooterTemplate>

    </MudTable>

}

@code {

    private bool _dense = true;
    private bool _multiSelect = false;

    private string pageheader { get; set; } = "1.2.Good Receive";
    private bool _processing = false;

    public string mPagedesc { get; set; } = "1.2.Good Receive";
    private string mPagename { get; set; } = "/1/1_2";

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inb_Goodreceive_Go selectedItem = null;
    private HashSet<Inb_Goodreceive_Go> selectedItems = new HashSet<Inb_Goodreceive_Go>();
    private IEnumerable<Inb_Goodreceive_Go> Elements = new List<Inb_Goodreceive_Go>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    private TableGroupDefinition<Inb_Goodreceive_Go> _groupDefinition = new()
    {
        GroupName = "Pallet Go",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.Pallteno
    };


    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllInbGoodreceiveGos());

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Goodreceive_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemtag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Docno} {element.Pono} {element.Docnote}".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            IbpOrderQueueRptExcel excelReport = new IbpOrderQueueRptExcel();
            List<Inb_Goodreceive_Go> listExcelReport = new List<Inb_Goodreceive_Go>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {

            IbpOrderQueueRptPdf pdfReport = new IbpOrderQueueRptPdf();
            List<Inb_Goodreceive_Go> listPdfReport = new List<Inb_Goodreceive_Go>();
            listPdfReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
