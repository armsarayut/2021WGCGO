@page "/inb/receivingqueue"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models.Inb
@using ClosedXML.Excel
@using ClosedXML.Excel.Drawings
@using System
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime


@inject InboundService ObjInboundService


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>
    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Inb_Goodreceive_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>

            <MudButton OnClick="DownloadExcelDocument" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FileDownload" Style="background-color: mediumseagreen; color: white; width: 80px; height: 30px;">
                Excel
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FileDownload" Style="background-color: orangered; color: white; width: 80px; height: 30px;">
                PDF
            </MudButton>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>QueuDate</MudTh>
            <MudTh>Masterpallet</MudTh>
            <MudTh>Ducument</MudTh>
            <MudTh>PackID</MudTh>
            <MudTh>Material</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Unit</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="QueuDate">@context.Created</MudTd>
            <MudTd DataLabel="Masterpallet">@context.Pallteno</MudTd>
            <MudTd DataLabel="Ducument">@context.Docno</MudTd>
            <MudTd DataLabel="PackID">@context.Itemtag</MudTd>
            <MudTd DataLabel="Material">@context.Itemcode</MudTd>
            <MudTd DataLabel="Description">@context.Itemname</MudTd>
            <MudTd DataLabel="Qty">@context.Quantity</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPagecaption { get; set; } = "Good Receive";
    private bool _processing = false;

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inb_Goodreceive_Go selectedItem = null;
    private HashSet<Inb_Goodreceive_Go> selectedItems = new HashSet<Inb_Goodreceive_Go>();
    private IEnumerable<Inb_Goodreceive_Go> Elements = new List<Inb_Goodreceive_Go>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllInbGoodreceiveGos());
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Goodreceive_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itemtag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Docno} {element.Pono}".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.AddWorksheet(mPagecaption);

                #region Report Header
                var imagePath = @"wwwroot/images/Prepack.jpg";

                worksheet.Column(1).Width = 18;
                worksheet.Row(1).Height = 60;

                var image = worksheet.AddPicture(imagePath)
                        .MoveTo(worksheet.Cell("A1"));        //this will throw an error

                image.ScaleWidth(.3);
                image.ScaleHeight(.2);

    

                worksheet.Cell("B1").Value = mPagecaption + " Report";
                worksheet.Cell("B2").Value = $"PrintDate : {DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}";

                #endregion

                #region Report Data
                var rptRows = 4;
                worksheet.Cell(rptRows, 1).Value = "QueuDate";
                worksheet.Cell(rptRows, 2).Value = "Masterpallet";
                worksheet.Cell(rptRows, 3).Value = "Ducument";
                worksheet.Cell(rptRows, 4).Value = "PackID";
                worksheet.Cell(rptRows, 5).Value = "Material";
                worksheet.Cell(rptRows, 6).Value = "Description";
                worksheet.Cell(rptRows, 7).Value = "Qty";
                worksheet.Cell(rptRows, 8).Value = "Unit";

                foreach (var rpt in Elements)
                {
                    rptRows++;
                    worksheet.Cell(rptRows, 1).Value = rpt.Created;
                    worksheet.Cell(rptRows, 2).Value = rpt.Pallteno;
                    worksheet.Cell(rptRows, 3).Value = rpt.Docno;
                    worksheet.Cell(rptRows, 4).Value = rpt.Itemtag;
                    worksheet.Cell(rptRows, 5).Value = rpt.Itemcode;
                    worksheet.Cell(rptRows, 6).Value = rpt.Itemname;
                    worksheet.Cell(rptRows, 7).Value = rpt.Quantity;
                    worksheet.Cell(rptRows, 8).Value = rpt.Unit;
                }

                using (var stream = new MemoryStream())
                {
                    workbook.SaveAs(stream);
                    var content = stream.ToArray();

                    var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                    await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
                }
                #endregion


            }
        }
        catch (Exception e)
        {
            var excp = e.Message.ToString();
        }



    }

}
