@page "/inb-palletreturn"

@using System.Text.Json
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Wgc
@using GoWMS.Server.Models.Oub

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@inject StoreoutService ObjStoreoutService
@inject ErpApiService ObjErpApiService
@inject IStringLocalizer<IbpOrderReturn> L

<MudText Typo="Typo.h6" Color="Color.Primary">@L["pageHeader"]</MudText>

<MudGrid>
    <MudItem xs="6" sm="3">
        <MudText Typo="Typo.button" Color="Color.Secondary">@L["PalletGo"]</MudText>
        <div class="form-group">
            <input style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="@stringputpalletgo" placeholder="Enter PalletGo" />
        </div>
    </MudItem>
</MudGrid>

<MudForm>
    <MudRadioGroup @bind-SelectedOption="@SelectedOption">
        <MudRadio Option="@("OPT1")" Color="Color.Primary">FromPack</MudRadio>
        <MudRadio Option="@("OPT2")" Color="Color.Secondary">FromPallet</MudRadio>
        <MudRadio Option="@("OPT3")" Color="Color.Tertiary">FromOrder</MudRadio>
    </MudRadioGroup>
</MudForm>

<br />

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    @if (StkGroup)
    {

        <MudTable Items="@Elements"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ?"400px":"")"
                  MultiSelection="true"
                  Dense="@dense"
                  Hover="@hover"
                  Bordered="@bordered"
                  Striped="@striped"
                  Filter="new Func<Oub_CustomerReturn,bool>(FilterFunc)"
                  @bind-SelectedItems="selectedItems">
            <ToolBarContent>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Style="background-color: mediumseagreen; color: white; width: 160px; height: 30px;" OnClick=@SelectOrderPick>
                    @L["SETRETURN"]
                </MudButton>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Dnno)">@L["DNNO"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Lotno)">@L["Lot"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Batchno)">@L["Batch"]</MudTableSortLabel></MudTh>

                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Customer_code)">@L["CUSTOMERCODE"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Material_code)">@L["ITEMCODE"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Material_description)">@L["ITEMNAME"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Unit)">@L["UNIT"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Package_id)">@L["SEQ"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Sono)">SONO</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Palletno)">PALLET</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Oub_CustomerReturn, object>(x=>x.Sodate)">DATE</MudTableSortLabel></MudTh>

            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="DNNO">@context.Dnno</MudTd>
                <MudTd DataLabel="LOTNO">@context.Lotno</MudTd>
                <MudTd DataLabel="BATCHNO">@context.Batchno</MudTd>
                <MudTd DataLabel="CUSTOMERCODE">@context.Customer_code</MudTd>
                <MudTd DataLabel="ITEMCODE">@context.Material_code</MudTd>
                <MudTd DataLabel="ITEMNAME">@context.Material_description</MudTd>
                <MudTd DataLabel="UNIT">@context.Unit</MudTd>
                <MudTd DataLabel="SEQ">@context.Package_id</MudTd>
                <MudTd DataLabel="SONO">@context.Sono</MudTd>
                <MudTd DataLabel="PALLET">@context.Palletno</MudTd>
                <MudTd DataLabel="DATE">@Convert.ToDateTime(context.Sodate).ToShortDateString()</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>
        </MudTable>
    }
    else
    {

    }


    <MudMessageBox @ref="mbox" Title="@mboxheader" CancelText="Cancel">
        <MessageContent>
            @foreach (var item in References)
            {
                <br />
                @item
            }
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.DataSaverOn">Confirm!</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {
    public string SelectedOption { get; set; }

    MudMessageBox mbox { get; set; }

    private bool _dense = false;
    private bool _multiSelect = true;
    public string stringput { get; set; } = "";
    public string stringputdnno { get; set; } = "";
    public string stringputpalletgo { get; set; } = "";
    public string stringputlot { get; set; } = "";
    public string stringputbatch { get; set; } = "";

    private string mPageHeader = "Customer Return";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Oub_CustomerReturn selectedItem = null;
    private HashSet<Oub_CustomerReturn> selectedItems = new HashSet<Oub_CustomerReturn>();
    private IEnumerable<Oub_CustomerReturn> Elements = new List<Oub_CustomerReturn>();


    string state = "Message box hasn't been opened yet";

    string mboxheader { get; set; } = "รายการที่ขอตรวจสอบ";
    string mboxcontent { get; set; } = "";
    string mboxmessage { get; set; } = "";

    public int elevation = 0;

    public bool StkGroup { get; set; }

    protected List<string> References { get; set; } = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        Elements = await Task.Run(() => objCS.GetAllCustomerReturn());

        OnSelectChange();
    }

    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;
        if (StkGroup)
        {
            mPageHeader = "Customer Return";
        }
        else
        {
            mPageHeader = "Stock Group";
        }
    }

    private bool FilterFunc(Oub_CustomerReturn element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Material_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Customer_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Palletno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Dnno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Lotno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Sono.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Material_description} ".Contains(searchString))
            return true;
        return false;
    }


    async Task SelectOrder()
    {



        /*
        var result = selectedItems.GroupBy(t => t.Material_code)
                   .Select(t => new
                   {
                       Itemcode = t.Key,
                       Qty = t.Sum(ta => ta.Quantity),
                   }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;

        foreach (var rec in result)
        {
            i++;
            strPopup.Append(i.ToString() + ". รายการ : ");
            strPopup.Append(rec.Itemcode.ToString());
            strPopup.Append(" จำนวน : ");
            strPopup.AppendLine(rec.Qty.ToString());
        }

        System.Text.StringBuilder popup = new System.Text.StringBuilder();
        popup.AppendLine("รายการที่ขอตรวจสอบ");
        popup.Append(strPopup.ToString());

        string sContentText = popup.ToString();

        var parameters = new DialogParameters();
        parameters.Add("ContentText", sContentText);
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var formModal = DialogService.Show<DialogTemplateExample_Dialog>("Confirm", parameters);

        var resultModal = await Task.Run(() => formModal.Result);

        var formModal1 = await Task.Run(() => DialogService.ShowMessageBox("AA", "XX"));
        */

    }

    private async void OnButtonOrderSelected()
    {
        var resultlist = selectedItems.GroupBy(t => t.Material_code)
                 .Select(t => new
                 {
                     Itemcode = t.Key,
                     Qty = t.Sum(ta => ta.Quantity),
                 }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;
        mboxcontent = "";

        References.Clear();

        if (resultlist.Count > 0)
        {
            foreach (var rec in resultlist)
            {
                i++;
                strPopup.Clear();
                strPopup.Append(i.ToString() + ". รายการ : ");
                strPopup.Append(rec.Itemcode.ToString());
                strPopup.Append(" จำนวน : ");
                strPopup.AppendLine(rec.Qty.ToString());

                References.Add(strPopup.ToString());
            }
            bool? result = await mbox.Show();
            state = result == null ? "Cancelled" : "Confirmed";

            if (state == "Confirmed")
            {
                SelectOrderPick();
            }

            StateHasChanged();
        }

    }

    private void SelectOrderPick()
    {
        var strRES = selectedItems.OrderBy(x => x.Package_id).Select(x => new
        {
            package_Id = x.Package_id
            ,
            Roll_Id = x.Dnno + "." + x.Package_id
            ,
            material_code = x.Material_code
            ,
            material_description = x.Material_description
            ,
            receiving_date = DateTime.Now.Date
            ,
            gr_quantity = 1
            ,
            unit = x.Unit
            ,
            lotno = x.Lotno
            ,
            batchno = x.Batchno
            ,
            palletgo = stringputpalletgo
            ,
            Document_Number = x.Dnno
            ,
            Gr_Quantity_Kg = 1
        }).ToList();

        List<Api_Receivingorders_Go> MapPalletItem = new List<Api_Receivingorders_Go>();


        foreach (var sel in strRES)
        {

            MapPalletItem.Add(new Api_Receivingorders_Go
            {
                Package_Id = sel.package_Id
            ,
                Roll_Id = sel.Document_Number + "." + sel.Roll_Id
            ,
                Material_Code = sel.material_code
            ,
                Material_Description = sel.material_description
            ,
                Receiving_Date = sel.receiving_date
            ,
                Gr_Quantity = sel.gr_quantity
            ,
                Unit = sel.unit
            ,
                Gr_Quantity_Kg = sel.Gr_Quantity_Kg
            ,
                Wh_Code = "WS"
            ,
                Warehouse = "2000051"
            ,
                Locationno = "4"
            ,
                Document_Number = sel.Document_Number
            ,
                Job = sel.lotno
            ,
                Job_Code = sel.batchno
            ,
                Lpncode = sel.palletgo
            });

        }

        if (MapPalletItem.Count > 0)
        {
            if (stringputpalletgo.Length > 0)
            {
                try
                {
                    Task<string> retString;

                    retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), stringputpalletgo);

                    ObjErpApiService.SetMappedPalletReturn(stringputpalletgo);

                    Snackbar.Add("Pallet created", Severity.Success);

                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message.ToString(), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Please enter PalletGO", Severity.Warning);
            }
        }

        Elements = ObjStoreoutService.GetAllCustomerReturn();
        this.StateHasChanged();

        /*
        var serializeOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };

        string cus = "MANUAL";
        string so = "CY-" + DateTime.Now.ToString("yyMMddHHmmssffff");
        string lot = "-";
        string batch = "-";
        DateTime requestdate = DateTime.Today.Date;

        var strRES = selectedItems.OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = lot, batchno = batch, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();

        var jsonRES = JsonSerializer.Serialize(strRES, serializeOptions);

        var iReturn = 0;
        var sReturn = "Call";

        ObjApiService.SetPickWgcmanual(jsonRES, ref iReturn, ref sReturn);

        if (selectedItems.Count > 0)
        {
            if (iReturn == 0)
            {
                Snackbar.Add(sReturn, Severity.Error);
            }
            else
            {
                Snackbar.Add("Order picking created", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Please select order picking", Severity.Warning);
        }
        */
    }

    void KeyUp(KeyboardEventArgs e)
    {
        /*
        if (e.Key == "Enter")
        {

            string pallettemp = stringput;

            setstr(pallettemp);
            Reset();

        }
         */
    }

}