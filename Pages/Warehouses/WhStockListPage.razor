@page "/2/2_1"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Reports

@inject InvService ObjService
@inject UserServices OpjUserService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<WhStockListPage> L
@attribute [Authorize]

@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudMenu Icon="@Icons.Filled.FileDownload" Color="Color.Inherit">
                <MudMenuItem OnClick="DownloadExcelDocument">@L["Excel"]</MudMenuItem>
                <MudMenuItem OnClick="DownloadPdfDocument">@L["PDF"]</MudMenuItem>
            </MudMenu>
        </MudTooltip>
        <MudSpacer />
        <MudSwitch T="bool" CheckedChanged="@OnSelectChange" Color="Color.Primary" Label="@selectby" />
    </MudAppBar>

    <MudGrid>
        <MudItem xs="12" md="3">
            
        </MudItem>
    </MudGrid>

    @if (StkGroup)
    {
        <MudTable Items="@Elements" FixedHeader="@fixed_header" 
                  FixedFooter="@fixed_footer" 
                  Height="@(fixed_header || fixed_footer ?"600px":"")" 
                  Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" 
                  Filter="new Func<Inv_Stock_GoInfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString"
                              Placeholder=@L["Search"]
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@L["ItemCode"]</MudTh>
                <MudTh>@L["ItemName"]</MudTh>
                <MudTh>@L["Stock"]</MudTh>
                <MudTh>@L["Lot"]</MudTh>
                <MudTh>@L["SEQ"]</MudTh>
                <MudTh>@L["PalletGo"]</MudTh>
                <MudTh>@L["Area"]</MudTh>
                <MudTh>@L["Location"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel=@L["ItemCode"]>@context.Itemcode</MudTd>
                <MudTd DataLabel=@L["ItemName"]>@context.Itemname</MudTd>
                <MudTd DataLabel=@L["Stock"]>@string.Format(VarGlobals.FormatN0, @context.Quantity)</MudTd>
                <MudTd DataLabel=@L["Lot"]>@context.Docno</MudTd>
                <MudTd DataLabel=@L["SEQ"]>@context.Pallettag</MudTd>
                <MudTd DataLabel=@L["PalletGo"]>@context.Pallteno</MudTd>
                <MudTd DataLabel=@L["Area"]>@context.Storagearea</MudTd>
                <MudTd DataLabel=@L["Location"]>@context.Storagebin</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudTable Items="@Elements_"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ?"600px":"")"
                  Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
                  Filter="new Func<InvStockSum,bool>(FilterFunc_)" @bind-SelectedItem="selectedItem_">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString"
                              Placeholder=@L["Search"]
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@L["ItemCode"]</MudTh>
                <MudTh>@L["ItemName"]</MudTh>
                <MudTh>@L["TotalStock"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ItemCode">@context.Item_code</MudTd>
                <MudTd DataLabel="ItemName">@context.Item_name</MudTd>
                <MudTd DataLabel="TotalStock">@string.Format(VarGlobals.FormatN0, @context.Totalstock) </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>
        </MudTable>
    }

}

@code {

    public string mPagedesc { get; set; } = "2.1.Stocklist";
    private string mPagename { get; set; } = "/2/2_1";

    private string pageheader { get; set; } = "2.1.Stocklist";
    private string selectby { get; set; }
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inv_Stock_GoInfo selectedItem = null;
    private HashSet<Inv_Stock_GoInfo> selectedItems = new HashSet<Inv_Stock_GoInfo>();
    private IEnumerable<Inv_Stock_GoInfo> Elements = new List<Inv_Stock_GoInfo>();

    private InvStockSum selectedItem_ = null;
    private HashSet<InvStockSum> selectedItems_ = new HashSet<InvStockSum>();
    private IEnumerable<InvStockSum> Elements_ = new List<InvStockSum>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    public bool StkGroup { get; set; }


    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetStockListInfo());
        Elements_ = await Task.Run(() => objCS.GetStockSum());

        OnSelectChange();
        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }


    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;
        if (StkGroup)
        {
            selectby = "View Stock List";
        }
        else
        {
            selectby = "View Stock Summary";
        }
    }



    private bool FilterFunc(Inv_Stock_GoInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallettag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Docno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Storagebin}".Contains(searchString))
            return true;
        return false;
    }

    private bool FilterFunc_(InvStockSum element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_name} ".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            if (StkGroup)
            {
                WhStockListRptExcel excelReport = new WhStockListRptExcel();
                List<Inv_Stock_GoInfo> listExcelReport = new List<Inv_Stock_GoInfo>();
                listExcelReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
            }
            else
            {
                WhStockSumRptExcel excelReport = new WhStockSumRptExcel();
                List<InvStockSum> listExcelReport = new List<InvStockSum>();
                listExcelReport = Elements_.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
            }

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            if (StkGroup)
            {
                WhStockListRptPdf pdfReport = new WhStockListRptPdf();

                List<Inv_Stock_GoInfo> listPdfReport = new List<Inv_Stock_GoInfo>();
                listPdfReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
                //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

            }
            else
            {
                WhStockSumRptPdf pdfReport = new WhStockSumRptPdf();

                List<InvStockSum> listPdfReport = new List<InvStockSum>();
                listPdfReport = Elements_.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
                //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
            }
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
