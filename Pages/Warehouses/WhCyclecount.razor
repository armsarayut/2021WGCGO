@page "/2/2_4"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using System.Text.Json
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject InvService ObjService
@inject PublicFunServices ObjFunService

@inject ReportService UserlogService
@inject WgcService ObjErpService
@inject ISnackbar Snackbar
@inject ErpApiService ObjApiService
@inject UserServices OpjUserService
@inject IStringLocalizer<WhCyclecount> L
@attribute [Authorize]


@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Done"
                   Color="Color.Success"
                   OnClick=@OnButtonOrderSelected>@L["START"]</MudButton>
                <MudSpacer />
            </MudAppBar>

            @if (StkGroup)
            {


                <MudTable Items="@Elements"
                          FixedHeader="@fixed_header"
                          FixedFooter="@fixed_footer"
                          Height="@(fixed_header || fixed_footer ?"500px":"")"
                          MultiSelection="true"
                          Dense="@dense"
                          Hover="@hover"
                          Bordered="@bordered"
                          Striped="@striped"
                          Filter="new Func<Inv_Stock_GoInfo,bool>(FilterFunc)"
                          @bind-SelectedItems="selectedItems">
                    <ToolBarContent>

                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString"
                                      Placeholder=@L["Search"]
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Itemcode)">@L["ItemCode"] </MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Itemname)">@L["ItemName"] </MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Quantity)">@L["Stock"] </MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Docno)">@L["Lot"] </MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Pallettag)">@L["SEQ"] </MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoInfo, object>(x=>x.Pallteno)">@L["PalletGo"] </MudTableSortLabel></MudTh>
                    </HeaderContent>


                    <RowTemplate>
                        <MudTd DataLabel=@L["ItemCode"]>@context.Itemcode</MudTd>
                        <MudTd DataLabel=@L["ItemName"]>@context.Itemname</MudTd>
                        <MudTd DataLabel=@L["Stock"]>@context.Quantity</MudTd>
                        <MudTd DataLabel=@L["Lot"]>@context.Docno</MudTd>
                        <MudTd DataLabel=@L["SEQ"]>@context.Pallettag</MudTd>
                        <MudTd DataLabel=@L["PalletGo"]>@context.Pallteno</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {

            }

            <MudMessageBox @ref="mbox" Title="@mboxheader" CancelText="Cancel">
                <MessageContent>
                    @foreach (var item in References)
                    {
                        <br />
                        @item
                    }
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.DataSaverOn">Confirm!</MudButton>
                </YesButton>
            </MudMessageBox>
        }

@code {

    MudMessageBox mbox { get; set; }

    private bool _dense = false;
    private bool _multiSelect = true;

    public string mPagedesc { get; set; } = "2.4.Cycle Count";
    private string mPagename { get; set; } = "/2/2_4";

    private string pageheader = "2.4.Cycle Count";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inv_Stock_GoInfo selectedItem = null;
    private HashSet<Inv_Stock_GoInfo> selectedItems = new HashSet<Inv_Stock_GoInfo>();
    private IEnumerable<Inv_Stock_GoInfo> Elements = new List<Inv_Stock_GoInfo>();

    string state = "Message box hasn't been opened yet";

    string mboxheader { get; set; } = "รายการที่ขอตรวจสอบ";
    string mboxcontent { get; set; } = "";
    string mboxmessage { get; set; } = "";

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    public bool StkGroup { get; set; }

    protected List<string> References { get; set; } = new List<string>();

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetStockListInfo());

        this.OnSelectChange();
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;

    }

    private bool FilterFunc(Inv_Stock_GoInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallettag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Docno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Storagebin}".Contains(searchString))
            return true;
        return false;
    }

    private bool FilterFunc_(InvStockSum element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_name} ".Contains(searchString))
            return true;
        return false;
    }

    async Task SelectOrder()
    {
        var result = selectedItems.GroupBy(t => t.Itemcode)
                   .Select(t => new
                   {
                       Itemcode = t.Key,
                       Qty = t.Sum(ta => ta.Quantity),
                   }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;

        foreach (var rec in result)
        {
            i++;
            strPopup.Append(i.ToString() + ". รายการ : ");
            strPopup.Append(rec.Itemcode.ToString());
            strPopup.Append(" จำนวน : ");
            strPopup.AppendLine(rec.Qty.ToString());
        }

        System.Text.StringBuilder popup = new System.Text.StringBuilder();
        popup.AppendLine("รายการที่ขอตรวจสอบ");
        popup.Append(strPopup.ToString());

        string sContentText = popup.ToString();

        var parameters = new DialogParameters();
        parameters.Add("ContentText", sContentText);
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var formModal = DialogService.Show<DialogTemplateExample_Dialog>("Confirm", parameters);

        var resultModal = await Task.Run(() => formModal.Result);

        var formModal1 = await Task.Run(() => DialogService.ShowMessageBox("AA", "XX"));

    }

    private async void OnButtonOrderSelected()
    {
        bool? result = await CheckRoleAdd();
        if (result == true)
        {
            var resultlist = selectedItems.GroupBy(t => t.Itemcode)
         .Select(t => new
         {
             Itemcode = t.Key,
             Qty = t.Sum(ta => ta.Quantity),
         }).ToList();

            System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
            Int16 i = 0;
            mboxcontent = "";

            References.Clear();

            if (resultlist.Count > 0)
            {
                foreach (var rec in resultlist)
                {
                    i++;
                    strPopup.Clear();
                    strPopup.Append(i.ToString() + ". รายการ : ");
                    strPopup.Append(rec.Itemcode.ToString());
                    strPopup.Append(" จำนวน : ");
                    strPopup.AppendLine(rec.Qty.ToString());

                    References.Add(strPopup.ToString());
                }
                result = await mbox.Show();
                state = result == null ? "Cancelled" : "Confirmed";

                if (state == "Confirmed")
                {
                    this.InsertAuditrial("Set Cycle count List : " + strPopup.ToString(), pageheader);
                    SelectOrderPick();
                }

                StateHasChanged();
            }
        }


    }

    private void SelectOrderPick()
    {
        var serializeOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };

        string cus = "MANUAL";
        //string so = "CY-" + DateTime.Now.ToString("yyMMddHHmmssffff");
        string so = "CY-" + ObjFunService.GetRunning("sq002", 4);

        string lot = "-";
        string batch = "-";
        DateTime requestdate = DateTime.Today.Date;


        var pallets = selectedItems.GroupBy(g => g.Pallteno).OrderBy(o => o.Key).Select(s => s.Key);

        // var filteredOrders = Elements.Where(o => allowedStatus.Contains(o.StatusCode));

        var filteredOrders = from order in Elements
                             where pallets.Contains(order.Pallteno)
                             select order;


        var strRES = filteredOrders.OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = lot, batchno = batch, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();

        //var strRES = selectedItems.OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = lot, batchno = batch, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();






        //var strLON = selectedItems.OrderBy(x => x.SEQ_NO).Select(x => new { SEQ_NO = x.SEQ_NO, SO_NO = x.SO_NO, DN_SEQ = x.DN_SEQ, ITEM_CODE = x.ITEM_CODE, PALLET_GO = x.PALLET_GO, DN_QTY = x.DN_QTY }).ToList();

        //var jsonLON = JsonSerializer.Serialize(strLON, serializeOptions);

        var jsonRES = JsonSerializer.Serialize(strRES, serializeOptions);

        var iReturn = 0;
        var sReturn = "Call";

        ObjApiService.SetPickingWgcAuduit(jsonRES, ref iReturn, ref sReturn);

        if (selectedItems.Count > 0)
        {
            if (iReturn == 0)
            {
                Snackbar.Add(sReturn, Severity.Error);
            }
            else
            {
                this.InsertAuditrial("Start Cycel count : " + so.ToString(), pageheader);

                Snackbar.Add("Order picking created", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Please select order picking", Severity.Warning);
        }
    }

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion

}
