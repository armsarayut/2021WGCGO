@page "/2/2_3"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Reports

@inject IJSRuntime JSRuntime
@inject InvService ObjService
@inject UserServices OpjUserService
@inject IStringLocalizer<WhShelfListPage> L
@attribute [Authorize]

@if (Elements == null)
{

    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
              Filter="new Func<Vrpt_shelf_listInfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
              SortLabel="Sort By">
        <ToolBarContent>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" 
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" 
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>@L["Location"]</MudTh>
            <MudTh>@L["LANE"] </MudTh>
            <MudTh>@L["BANK"] </MudTh>
            <MudTh>@L["BAY"] </MudTh>
            <MudTh>@L["LEVEL"] </MudTh>
            <MudTh>@L["MasterPallet"] </MudTh>
            <MudTh>@L["Status"] </MudTh>
            <MudTh>@L["LastUpdate"] </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@L["Location"]">@context.Shelfcode</MudTd>
            <MudTd DataLabel="@L["LANE"]">@context.Srm_no</MudTd>
            <MudTd DataLabel="@L["BANK"]">@context.Shelfbank</MudTd>
            <MudTd DataLabel="@L["BAY"]">@context.Shelfbay</MudTd>
            <MudTd DataLabel="@L["LEVEL"]">@context.Shelflevel</MudTd>
            <MudTd DataLabel="@L["MasterPallet"]">@context.Lpncode</MudTd>
            <MudTd DataLabel="@L["Status"]">@context.St_desc</MudTd>
            <MudTd DataLabel="@L["LastUpdate"]">@context.Modified</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    public string mPagedesc { get; set; } = "2.3.Location";
    private string mPagename { get; set; } = "/2/2_3";

    private readonly string pageheader = "2.3.Location";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Vrpt_shelf_listInfo selectedItem = null;
    private HashSet<Vrpt_shelf_listInfo> selectedItems = new HashSet<Vrpt_shelf_listInfo>();
    private IEnumerable<Vrpt_shelf_listInfo> Elements = new List<Vrpt_shelf_listInfo>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetShelfList());

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Vrpt_shelf_listInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Shelfcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Lpncode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            WhShelfListPageRptExcel excelReport = new WhShelfListPageRptExcel();
            List<Vrpt_shelf_listInfo> listExcelReport = new List<Vrpt_shelf_listInfo>();
            listExcelReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            WhShelfListPageRptPdf pdfReport = new WhShelfListPageRptPdf();

            List<Vrpt_shelf_listInfo> listPdfReport = new List<Vrpt_shelf_listInfo>();
            listPdfReport = Elements.ToList();
            var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }


}
