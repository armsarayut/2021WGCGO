@page "/erp-listofneed"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Erp
@using System;
@using System.Diagnostics;
@using System.Threading;

@inject ErpService ObjErpService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @mPageHeader </MudText>
    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<V_List_OF_Materials_NeedsInfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FileDownload" Style="background-color: mediumseagreen; color: white; width: 80px; height: 30px;">
                Excel
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FileDownload" Style="background-color: orangered; color: white; width: 80px; height: 30px;">
                PDF
            </MudButton>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>

            <MudTh>Customer</MudTh>
            <MudTh>CustomerName</MudTh>
            <MudTh>FinishProduct</MudTh>
            <MudTh>FinishProductDescription</MudTh>
            <MudTh>Material</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Job</MudTh>
            <MudTh>JobCode</MudTh>
            <MudTh>MOBarcode</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Customer">@context.Customer</MudTd>
            <MudTd DataLabel="CustomerName">@context.Customer_Name</MudTd>
            <MudTd DataLabel="FinishProduct">@context.Finished_Product</MudTd>
            <MudTd DataLabel="FinishProductDescription">@context.Finished_Product_Description</MudTd>
            <MudTd DataLabel="Material">@context.Material_Code</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="Job">@context.Job</MudTd>
            <MudTd DataLabel="JobCode">@context.Job_Code</MudTd>
            <MudTd DataLabel="MOBarcode">@context.MO_Barcode</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPageHeader = "List of Need Material";
    //private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private string stoptime = "";
    private V_List_OF_Materials_NeedsInfo selectedItem = null;
    private HashSet<V_List_OF_Materials_NeedsInfo> selectedItems = new HashSet<V_List_OF_Materials_NeedsInfo>();
    private IEnumerable<V_List_OF_Materials_NeedsInfo> Elements = new List<V_List_OF_Materials_NeedsInfo>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        ErpService objCS = new ErpService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        // Create new stopwatch.
        Stopwatch stopwatch = new Stopwatch();

        // Begin timing.
        stopwatch.Start();

        Elements = await Task.Run(() => objCS.GetAllErpListofNeeds());
        // Stop timing.
        stopwatch.Stop();
        // Write result.
        Console.WriteLine("Time elapsed: {0}", stopwatch.Elapsed);

    }


    private bool FilterFunc(V_List_OF_Materials_NeedsInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Material_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Customer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Customer_Name} {element.Description} {element.MO_Barcode}".Contains(searchString))
            return true;
        return false;
    }

}
